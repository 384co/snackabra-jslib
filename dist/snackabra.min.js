!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.SB=t():e.SB=t()}(self,(()=>(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{Channel:()=>he,ChannelEndpoint:()=>ue,ChannelSocket:()=>de,MessageBus:()=>a,SB:()=>be,SB384:()=>ce,SBCrypto:()=>Y,SBMessage:()=>le,SBObjectHandle:()=>pe,Snackabra:()=>we,arrayBuffer32ToBase62:()=>N,arrayBufferToBase62:()=>D,arrayBufferToBase64:()=>j,assemblePayload:()=>V,base62ToArrayBuffer32:()=>I,base62ToBase64:()=>L,base64ToArrayBuffer:()=>x,base64ToBase62:()=>U,compareBuffers:()=>R,decodeB64Url:()=>q,encodeB64Url:()=>z,encryptedContentsMakeBinary:()=>d,extractPayload:()=>W,extractPayloadV1:()=>G,getRandomValues:()=>u,isBase62Encoded:()=>$,jsonParseWrapper:()=>J,partition:()=>F,sbCrypto:()=>se,version:()=>r});var n=function(e,t,n,r){var o,s=arguments.length,a=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var i=e.length-1;i>=0;i--)(o=e[i])&&(a=(s<3?o(a):s>3?o(t,n,a):o(t,n))||a);return s>3&&a&&Object.defineProperty(t,n,a),a};const r="2.0.0-alpha.5 (build 06)";var o=!1,s=!1;class a{bus={};#e(e){return this.bus[e]||(this.bus[e]=[])}subscribe(e,t){this.#e(e).push(t)}unsubscribe(e,t){let n=-1;this.bus[e]?-1!=(n=this.bus[e].findLastIndex((e=>e==t)))?this.bus[e].splice(n,1):console.info("fyi: asked to remove a handler but it's not there"):console.info("fyi: asked to remove a handler but the event is not there")}publish(e,...t){for(const n of this.#e("*"))n(e,...t);for(const n of this.#e(e))n(...t)}}function i(e,t){return new Promise(((n,r)=>{try{const o="string"==typeof e?e:e instanceof URL?e.href:e.url;o.includes("a32.")&&r(`[SBFetch] ERROR: url contains substring 'a32.' (${o})`),fetch(e,t??{method:"GET"}).then((e=>{n(e)})).catch((e=>{const t=`[SBFetch] Error (fetch through a reject, might be normal): ${e}`;console.warn(t),r(t)}))}catch(e){const t=`[SBFetch] Error (fetch exception, might be normal operation): ${e}`;console.warn(t),r()}}))}function c(e){return e instanceof Error?e:new Error(String(e))}function l(e,t){throw new Error("<< SB lib error ("+e+": "+t+") >>")}function h(e,t){if(!e)throw new Error(`<< SB assertion error: ${t} >>`)}async function y(e){const t=new ce(e);await t.ready;const n=t.exportable_pubKey,r=t.exportable_privateKey,o=t.hash,s=await crypto.subtle.generateKey({name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),a=await crypto.subtle.exportKey("jwk",s),i=await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-384"},!0,["deriveKey"]),c=await crypto.subtle.exportKey("jwk",i.privateKey);return{channelData:{roomId:o,ownerKey:JSON.stringify(n),encryptionKey:JSON.stringify(a),signKey:JSON.stringify(c)},exportable_privateKey:r}}function d(e){try{let t,n;if(s&&(console.log("=+=+=+=+ processing content"),console.log(e.content.constructor.name)),"string"==typeof e.content)try{t=x(decodeURIComponent(e.content))}catch(e){throw new Error("EncryptedContents is string format but not base64 (?)")}else{const n=e.content.constructor.name;h("ArrayBuffer"===n||"Uint8Array"===n,"undetermined content type in EncryptedContents object"),t=e.content}if(s&&console.log("=+=+=+=+ processing nonce"),"string"==typeof e.iv)s&&(console.log("got iv as string:"),console.log(structuredClone(e.iv))),n=x(decodeURIComponent(e.iv)),s&&(console.log("this was turned into array:"),console.log(structuredClone(n)));else if("Uint8Array"===e.iv.constructor.name||"ArrayBuffer"===e.iv.constructor.name)s&&console.log("it's an array already"),n=new Uint8Array(e.iv);else{s&&console.log("probably a dictionary");try{n=new Uint8Array(Object.values(e.iv))}catch(t){o&&(console.error("ERROR: cannot figure out format of iv (nonce), here's the input object:"),console.error(e.iv)),h(!1,"undetermined iv (nonce) type, see console")}}return s&&(console.log("decided on nonce as:"),console.log(n)),h(12==n.length,`encryptedContentsMakeBinary(): nonce should be 12 bytes but is not (${n.length})`),{content:t,iv:n}}catch(e){throw console.error("encryptedContentsMakeBinary() failed:"),console.error(e),console.trace(),console.log(e.stack),e}}function u(e){if(e.byteLength<4096)return crypto.getRandomValues(e);{h(!(e.byteLength%1024),"getRandomValues(): large requested blocks must be multiple of 1024 in size");let t=0;try{for(t=0;t<e.byteLength;t+=1024){let n=new Uint8Array(1024);crypto.getRandomValues(n),e.set(n,t)}}catch(e){console.log(`got an error on index i=${t}`),console.log(e),console.trace()}return e}}const g=/([A-Za-z0-9+/_\-=]{64})([01]{42})/,p=/^([A-Za-z0-9+/_\-=]*)$/;function f(e){return p.test(e)}const w=f;function b(e){const t=p.exec(e);return h(t&&t[0]===e,"ensureSafe() tripped: something is not URI safe"),e}function v(e){return e&&""!==e?(e.startsWith("a32.")&&console.warn("[stripA32] removing 'a32.' prefix, these should be cleaned up by now"),e.replace(/^a32\./,"")):(console.warn("[stripA32] asked to strip an empty/missing string?"),"")}const m=[],k=[],S=[],K="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",A=K+"+/",E=K+"-_",C="=",_=16383;for(let e=0,t=A.length;e<t;++e)m[e]=A[e],k[e]=E[e],S[A.charCodeAt(e)]=e;function x(e){if(!f(e))throw new Error(`invalid character in string '${e}'`);let t;switch(e.length%4){case 2:e+="==";break;case 3:e+="="}const[n,r]=function(e){const t=e.length;let n=e.indexOf(C);return-1===n&&(n=t),[n,n===t?0:4-n%4]}(e),o=new Uint8Array(function(e,t){return 3*(e+t)/4-t}(n,r));let s=0;const a=r>0?n-4:n;let i;for(i=0;i<a;i+=4)t=S[e.charCodeAt(i)]<<18|S[e.charCodeAt(i+1)]<<12|S[e.charCodeAt(i+2)]<<6|S[e.charCodeAt(i+3)],o[s++]=t>>16&255,o[s++]=t>>8&255,o[s++]=255&t;return 2===r&&(t=S[e.charCodeAt(i)]<<2|S[e.charCodeAt(i+1)]>>4,o[s++]=255&t),1===r&&(t=S[e.charCodeAt(i)]<<10|S[e.charCodeAt(i+1)]<<4|S[e.charCodeAt(i+2)]>>2,o[s++]=t>>8&255,o[s++]=255&t),o}function B(e,t){return e[t>>18&63]+e[t>>12&63]+e[t>>6&63]+e[63&t]}function O(e,t,n,r){let o;const s=new Array((r-n)/3);for(let a=n,i=0;a<r;a+=3,i++)o=(t.getUint8(a)<<16&16711680)+(t.getUint8(a+1)<<8&65280)+(255&t.getUint8(a+2)),s[i]=B(e,o);return s.join("")}S["-".charCodeAt(0)]=62,S["_".charCodeAt(0)]=63;const P=e=>e instanceof ArrayBuffer?new DataView(e):new DataView(e.buffer,e.byteOffset,e.byteLength);function R(e,t){if(typeof e!=typeof t)return!1;if(null==e||null==t)return!1;const n=P(e),r=P(t);if(n.byteLength!==r.byteLength)return!1;for(let e=0;e<n.byteLength;e++)if(n.getUint8(e)!==r.getUint8(e))return!1;return!0}function j(e,t="url"){if(null==e)return l("L509","arrayBufferToBase64() -> null paramater"),"";{const n=P(e),r=n.byteLength,o=r%3,s=r-o,a=new Array(Math.floor(s/_)+Math.sign(o)),i="url"==t?k:m,c="";let l=0;for(let e=0;e<s;e+=_)a[l++]=O(i,n,e,e+_>s?s:e+_);if(1===o){const e=n.getUint8(r-1);a[l]=i[e>>2]+i[e<<4&63]+c+c}else if(2===o){const e=(n.getUint8(r-2)<<8)+n.getUint8(r-1);a[l]=i[e>>10]+i[e>>4&63]+i[e<<2&63]+c}return a.join("")}}const M="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",T=/^(a32\.)?[0-9A-Za-z]{43}$/;function I(e){if(!T.test(e))throw new Error(`base62ToArrayBuffer32: string must match: ${T}, value provided was ${e}`);e.startsWith("a32.")&&(e=e.slice(4));let t=BigInt(0);for(let n=0;n<e.length;n++)t=62n*t+BigInt(M.indexOf(e[n]));if(t>2n**256n-1n)throw new Error("base62ToArrayBuffer32: value exceeds 256 bits.");const n=new ArrayBuffer(32),r=new DataView(n);for(let e=0;e<8;e++,t>>=32n)r.setUint32(4*(8-e-1),Number(BigInt.asUintN(32,t)));return n}function D(e){if(32!==e.byteLength)throw new Error("arrayBufferToBase62: buffer must be exactly 32 bytes (256 bits).");let t="";for(let n=BigInt("0x"+Array.from(new Uint8Array(e)).map((e=>e.toString(16).padStart(2,"0"))).join(""));n>0n;n/=62n)t=M[Number(n%62n)]+t;return t.padStart(43,"0")}function N(e){return"a32."+D(e)}function L(e){return j(I(e))}function U(e){return D(x(e))}function $(e){return T.test(e)}function H(e,t){const n=new Uint8Array(e.byteLength+t.byteLength);return n.set(new Uint8Array(e),0),n.set(new Uint8Array(t),e.byteLength),n.buffer}function F(e,t){throw`partition() not tested on TS yet - (${e}, ${t})`}function J(e,t){if(null==e)return null;try{return JSON.parse(e)}catch(n){try{let t="",n="",r=e;for(;r!=(n=t,t=r,r=r?.match(/^(['"])(.*)\1$/m)?.[2]);)return JSON.parse(`'${n}'`)}catch{try{return JSON.parse(e.slice(1,-1))}catch{throw new Error(`JSON.parse() error at ${t} (tried eval and slice)\nString was: ${e}`)}}}}function G(e){try{const t=new Uint32Array(e.slice(0,4))[0],n=J((new TextDecoder).decode(e.slice(4,4+t)),"L476");let r=4+t;const o={};for(const t in n)o.key&&(o[t]=e.slice(r,r+n[t]),r+=n[t]);return o}catch(e){return console.error(e),{}}}function V(e){try{const t={version:"002"};let n=0,r=0;for(const o in e)n++,t[n.toString()]={name:o,start:r,size:e[o].byteLength},r+=e[o].byteLength;const o=(new TextEncoder).encode(JSON.stringify(t)),s=new Uint32Array([o.byteLength]);let a=H(new Uint8Array(s.buffer),new Uint8Array(o));for(const t in e)a=H(new Uint8Array(a),e[t]);return a}catch(e){return console.error(e),null}}function W(e){try{const t=new Uint32Array(e.slice(0,4))[0],n=J((new TextDecoder).decode(e.slice(4,4+t)),"L533"),r=4+t;switch(n.version||(n.version="001"),n.version){case"001":return G(e);case"002":{const t=[];for(let o=1;o<Object.keys(n).length;o++){const s=o.toString();if(n[s]){const o=n[s].start,a=n[s].size;t[n[s].name]=e.slice(r+o,r+o+a)}else console.log(`found nothing for index ${o}`)}return t}default:throw new Error("Unsupported payload version ("+n.version+") - fatal")}}catch(e){throw new Error("extractPayload() exception ("+e+")")}}function z(e){return e.replaceAll("+","-").replaceAll("/","_")}function q(e){const t=(e=e.replaceAll("-","+").replaceAll("_","/")).length%4;if(t){if(1===t)throw new Error("InvalidLengthError: Input base64url string is the wrong length to determine padding");e+=new Array(5-t).join("=")}return e}var Z;function X(e){return e&&Object.values(Z).includes(e.prefix)}!function(e){e.SBAES256Key="T881",e.SBPrivateKey="Aj3p",e.SBPublicKey="pNkk"}(Z||(Z={}));class Y{#t=new Map;SBKeyToJWK(e){if(!X(e))return e;switch(e.prefix){case"pNkk":return{crv:"P-384",ext:!0,key_ops:[],kty:"EC",x:e.x,y:e.y};case"Aj3p":return{crv:"P-384",d:e.d,ext:!0,key_ops:["deriveKey"],kty:"EC",x:e.x,y:e.y};case"T881":return{k:e.k,alg:"A256GCM",key_ops:["encrypt","decrypt"],kty:"oct"};default:throw new Error(`SBKeyToJWK() - unknown key prefix: ${e.prefix}`)}}JWKToSBKey(e){if(e){if("oct"===e.kty&&"A256GCM"===e.alg&&e.k&&43===e.k.length)return{prefix:Z.SBAES256Key,k:U(e.k)};if("EC"===e.kty&&"P-384"===e.crv&&e.x&&e.y){if(64!==e.x.length||64!==e.y.length)return;return e.d&&64===e.d.length?{prefix:Z.SBPrivateKey,x:e.x,y:e.y,d:e.d}:{prefix:Z.SBPublicKey,x:e.x,y:e.y}}}}SBKeyToString(e){const t=e.prefix;switch(t){case Z.SBAES256Key:return t+D(x(e.k)).slice(4);case Z.SBPublicKey:{const n=e,r=new Uint8Array(96);return r.set(x(n.x),0),r.set(x(n.y),48),t+D(r.slice(0,32).buffer).slice(4)+D(r.slice(32,64).buffer).slice(4)+D(r.slice(64,96).buffer).slice(4)}case Z.SBPrivateKey:{const n=e,r=new Uint8Array(160);return r.set(x(n.x).slice(4),0),r.set(x(n.y).slice(4),48),r.set(x(n.d).slice(4),96),t+D(r.slice(0,32).buffer).slice(4)+D(r.slice(32,64).buffer).slice(4)+D(r.slice(64,96).buffer).slice(4)+D(r.slice(96,128).buffer).slice(4)+D(r.slice(128,160).buffer).slice(4)}default:throw new Error("Unknown SBKey type.")}}StringToSBKey(e){try{if(e.length<4)return;const t=e.slice(0,4),n=e.slice(4);switch(t){case Z.SBAES256Key:{if(43!==n.length)return;const e=I("a32."+n);return{prefix:Z.SBAES256Key,k:j(e)}}case Z.SBPublicKey:{if(86!==n.length)return;const e=new Uint8Array(I("a32."+n.slice(0,43))),t=new Uint8Array(I("a32."+n.slice(43,86))),r=new Uint8Array(I("a32."+n.slice(86))),o=new Uint8Array(96);return o.set(e,0),o.set(t,32),o.set(r,64),{prefix:Z.SBPublicKey,x:j(o.slice(0,48).buffer),y:j(o.slice(48,96).buffer)}}case Z.SBPrivateKey:{if(215!==n.length)return;const e=new Uint8Array(I("a32."+n.slice(0,43))),t=new Uint8Array(I("a32."+n.slice(43,86))),r=new Uint8Array(I("a32."+n.slice(86,129))),o=new Uint8Array(I("a32."+n.slice(129,172))),s=new Uint8Array(I("a32."+n.slice(172,215))),a=new Uint8Array(160);return a.set(e,0),a.set(t,32),a.set(r,64),a.set(o,96),a.set(s,128),{prefix:Z.SBPrivateKey,x:j(a.slice(0,48).buffer),y:j(a.slice(48,96).buffer),d:j(a.slice(96,144).buffer)}}default:return}}catch(e){return void console.error("StringToSBKey() - malformed input, exception: ",e)}}async addKnownKey(e){if(e)if(X(e)&&(e=await this.SBKeyToJWK(e)),"string"==typeof e){const t=await se.sb384Hash(e);if(!t)return;if(this.#t.has(t))o&&console.log(`addKnownKey() - key already known: ${t}, skipping upgrade check`);else{const n={hash:t,pubKeyJson:e,key:await se.importKey("jwk",e,"ECDH",!0,["deriveKey"])};this.#t.set(t,n)}}else if(e instanceof ce){await e.ready;const t=e.hash,n={hash:t,pubKeyJson:e.exportable_pubKey,key:e.privateKey};this.#t.set(t,n)}else{if(!(e instanceof CryptoKey))throw new Error("addKnownKey() - invalid key type (must be string or SB384-derived)");{const t=await this.sb384Hash(e);if(!t)return;if(!this.#t.has(t)){const n={hash:t,pubKeyJson:await se.exportKey("jwk",e),key:e};this.#t.set(t,n)}}}}lookupKeyGlobal(e){return this.#t.get(e)}generateIdKey(e){return new Promise(((t,n)=>{try{crypto.subtle.digest("SHA-512",e).then((e=>{const n=e.slice(0,32),r=e.slice(32);t({id_binary:n,key_material:r})}))}catch(e){n(e)}}))}extractPubKey(e){try{const t={...e};return delete t.d,delete t.dp,delete t.dq,delete t.q,delete t.qi,t.key_ops=[],t}catch(e){return console.error(e),null}}async#n(e){try{const t=160,n=/^[0-9A-Za-z]+$/;let r=0,o=j(e);for(;!n.test(o);){if(r++>t)throw new Error(`generateChannelHash() - exceeded ${t} iterations:`);o=j(e=await crypto.subtle.digest("SHA-384",e))}return j(e)}catch(t){throw console.error("sb384Hash() failed",t),console.error("tried working from channelBytes:"),console.error(e),new Error(`sb384Hash() exception (${t})`)}}async#r(e,t){let n=0,r=j(e);for(;r!==t;){if(n++>160)return!1;r=j(e=await crypto.subtle.digest("SHA-384",e))}return!0}async sb384Hash(e){if(e instanceof CryptoKey&&(e=await this.exportKey("jwk",e).catch((()=>{}))),e){if(e&&e.x&&e.y){const t=H(x(q(e.x)),x(q(e.y)));return await this.#n(t)}throw new Error("sb384Hash() - invalid JsonWebKey (missing x and/or y)")}}async compareHashWithKey(e,t){if(!e||!t)return!1;let n=t.x,r=t.y;if(!n||!r)try{const e=JSON.parse(t);e.x&&(n=e.x),e.y&&(r=e.y)}catch{return!1}const o=H(x(q(n)),x(q(r)));return await this.#r(o,e)}async verifyChannelId(e,t){return await this.compareHashWithKey(t,e)}async generateKeys(){try{return await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-384"},!0,["deriveKey"])}catch(e){throw new Error("generateKeys() exception ("+e+")")}}async importKey(e,t,n,r,o){try{let s;const a={ECDH:{name:"ECDH",namedCurve:"P-384"},AES:{name:"AES-GCM"},PBKDF2:"PBKDF2"};if("jwk"===e){const e=t;if(void 0===e.kty)throw new Error("importKey() - invalid JsonWebKey");"ECDH"===e.alg&&(e.alg=void 0),s=await crypto.subtle.importKey("jwk",e,a[n],r,o)}else s=await crypto.subtle.importKey(e,t,a[n],r,o);return this.addKnownKey(s),s}catch(s){throw console.error(`... importKey() error: ${s}:`),console.log(e),console.log(t),console.log(n),console.log(r),console.log(o),new Error("importKey() exception ("+s+")")}}async exportKey(e,t){return await crypto.subtle.exportKey(e,t).catch((()=>{o&&console.warn("... exportKey() protested, this just means we treat this as undefined")}))}deriveKey(e,t,n,r,o){return new Promise((async(s,a)=>{const i={AES:{name:"AES-GCM",length:256},HMAC:{name:"HMAC",hash:"SHA-256",length:256}};try{s(await crypto.subtle.deriveKey({name:"ECDH",public:t},e,i[n],r,o))}catch(s){console.error(s,e,t,n,r,o),a(s)}}))}encrypt(e,t,n,r="encryptedContents"){return new Promise((async(o,s)=>{try{null===e&&s(new Error("no contents"));const a=n&&null!==n?n:crypto.getRandomValues(new Uint8Array(12));"string"==typeof e&&(e=(new TextEncoder).encode(e));const i=await crypto.subtle.encrypt({name:"AES-GCM",iv:a},t,e);o("encryptedContents"===r?{content:b(j(i)),iv:b(j(a))}:i)}catch(e){s(e)}}))}wrap(e,t,n){return new Promise((r=>{let o;o="string"===n?se.str2ab(t):t,se.encrypt(o,e).then((e=>{r(e)}))}))}unwrap(e,t,n){return new Promise((async(r,o)=>{try{const{content:o,iv:s}=d(t),a=await crypto.subtle.decrypt({name:"AES-GCM",iv:s},e,o);"string"===n?r((new TextDecoder).decode(a)):"arrayBuffer"===n&&r(a)}catch(e){console.error(`unwrap(): unknown issue - rejecting: ${e}`),console.trace(),o(e)}}))}sign(e,t){return new Promise((async(n,r)=>{try{const o=(new TextEncoder).encode(t);let s;try{s=await crypto.subtle.sign("HMAC",e,o),n(b(j(s)))}catch(e){r(e)}}catch(e){r(e)}}))}verify(e,t,n){return new Promise(((r,o)=>{try{crypto.subtle.verify("HMAC",e,x(t),se.str2ab(n)).then((e=>{r(e)}))}catch(e){o(c(e))}}))}str2ab(e){return(new TextEncoder).encode(e)}ab2str(e){return new TextDecoder("utf-8").decode(e)}compareKeys(e,t){return null!=e&&null!=t&&"object"==typeof e&&"object"==typeof t&&e.x===t.x&&e.y===t.y}lookupKey(e,t){for(let n=0;n<t.length;n++)if(se.compareKeys(e,t[n]))return n;return-1}async channelKeyStringsToCryptoKeys(e){return new Promise((async(t,n)=>{let r=J(e.ownerKey,"L1513");Promise.all([se.importKey("jwk",r,"ECDH",!1,[]),se.importKey("jwk",J(e.encryptionKey,"L2250"),"AES",!1,["encrypt","decrypt"]),se.importKey("jwk",J(e.signKey,"L2251"),"ECDH",!0,["deriveKey"]),se.importKey("jwk",se.extractPubKey(J(e.signKey,"L2252")),"ECDH",!0,[])]).then((async e=>{o&&console.log("++++++++ readyPromise() processed first batch of keys");const n=e[0],s=e[1],a=e[2],i=e[3];t({ownerKey:n,ownerPubKeyX:r.x,encryptionKey:s,signKey:a,publicSignKey:i})})).catch((e=>{console.error(`readyPromise(): failed to import keys: ${e}`),n(e)}))}))}}function Q(e,t,n){if(n&&n.get){let r=n.get;n.get=function(){const n=`__${e.constructor.name}__${t}__`;if(this.hasOwnProperty(n))return this[n];{const e=r.call(this);return Object.defineProperty(this,n,{configurable:!1,enumerable:!1,writable:!1,value:e}),e}}}}function ee(e,t,n){if(n&&n.get){let r=n.get;n.get=function(){const n=e.constructor.name;`${n}ReadyFlag`in this&&h(this.readyFlag,`${t} getter accessed but object ${n} not ready (fatal)`);const o=r.call(this);return h(null!=o,`${t} getter accessed in object type ${n} but returns NULL (fatal)`),o}}}const te=["SBMessage","SBObjectHandle"],ne=Symbol.for("SBMessage"),re=Symbol.for("SBObjectHandle");function oe(e,t){switch(t){case"SBMessage":return ne in e;case"SBObjectHandle":return re in e}}const se=new Y,ae=[{channel_server:"http://localhost:3845",channel_ws:"ws://localhost:3845",storage_server:"http://localhost:3843",shard_server:"http://localhost:3841"},{channel_server:"https://channel.384.dev",channel_ws:"wss://channel.384.dev",storage_server:"https://storage.384.dev",shard_server:"https://shard.3.8.4.land"},{channel_server:"https://r.384co.workers.dev",channel_ws:"wss://r.384co.workers.dev",storage_server:"https://s.384co.workers.dev"}],ie=["http://localhost:3841","http://localhost:3843","https://shard.3.8.4.land","https://storage.384.dev","https://storage.384co.workers.dev","https://shard.384.dev"];class ce{ready;sb384Ready;#o=!1;#s;#a;#i;#c;constructor(e=null){this.ready=new Promise((async(t,n)=>{try{if(e){if(!e.d){const e="ERROR creating SB384 object: invalid key (must be a PRIVATE key)";console.error(e),n(e)}this.#a=e;const t=se.extractPubKey(e);h(t,"unable to extract public key"),this.#s=t,this.#i=await se.importKey("jwk",e,"ECDH",!0,["deriveKey"])}else{const e=await se.generateKeys();this.#i=e.privateKey,this.#s=await se.exportKey("jwk",e.publicKey),this.#a=await se.exportKey("jwk",e.privateKey)}this.#c=await se.sb384Hash(this.#s),se.addKnownKey(this),this.#o=!0,t(this)}catch(e){n("ERROR creating SB384 object failed: "+c(e))}})),this.sb384Ready=this.ready}get readyFlag(){return this.#o}get exportable_pubKey(){return this.#s}get exportable_privateKey(){return this.#a}get privateKey(){return this.#i}get ownerChannelId(){return this.hash}get hash(){return this.#c}get _id(){return JSON.stringify(this.exportable_pubKey)}}n([Q],ce.prototype,"readyFlag",null),n([Q,ee],ce.prototype,"exportable_pubKey",null),n([Q,ee],ce.prototype,"exportable_privateKey",null),n([Q,ee],ce.prototype,"privateKey",null),n([Q,ee],ce.prototype,"ownerChannelId",null),n([Q,ee],ce.prototype,"hash",null),n([Q,ee],ce.prototype,"_id",null);class le{ready;channel;contents;#l;#h;[ne]=!0;MAX_SB_BODY_SIZE=98304;constructor(e,t="",n){this.contents="string"==typeof t?{encrypted:!1,isVerfied:!1,contents:t,sign:"",image:"",imageMetaData:{}}:{encrypted:!1,isVerfied:!1,contents:"",sign:"",image:t.image,imageMetaData:t.imageMetaData};let r=this.contents,o=JSON.stringify(r);n&&(this.#h=se.extractPubKey(n)),h(o.length<this.MAX_SB_BODY_SIZE,`SBMessage(): body must be smaller than ${this.MAX_SB_BODY_SIZE/1024} KiB (we got ${o.length/1024})})`),this.channel=e,this.ready=new Promise((t=>{e.channelReady.then((async()=>{this.contents.sender_pubKey=this.channel.exportable_pubKey,e.userName&&(this.contents.sender_username=e.userName);const n=this.channel.channelSignKey,o=se.sign(n,r.contents),s=se.sign(n,this.contents.image),a=se.sign(n,JSON.stringify(this.contents.imageMetaData));this.#h?this.#l=await se.deriveKey(this.channel.privateKey,await se.importKey("jwk",this.#h,"ECDH",!0,[]),"AES",!1,["encrypt","decrypt"]):this.#l=this.channel.keys.encryptionKey,Promise.all([o,s,a]).then((e=>{this.contents.sign=e[0],this.contents.image_sign=e[1],this.contents.imageMetadata_sign=e[2],this.contents.imgObjVersion="2",t(this)}))}))}))}get encryptionKey(){return this.#l}get sendToPubKey(){return this.#h}send(){return new Promise(((e,t)=>{this.ready.then((()=>{this.channel.send(this).then((n=>{"success"===n?e(n):t(n)}))}))}))}}n([ee],le.prototype,"encryptionKey",null);class he extends ce{channelReady;#y=!1;#d;motd="";locked=!1;owner=!1;admin=!1;adminData;verifiedGuest=!1;userName="";#u;#g;#p;#f="";#w="";#b="";constructor(e,t,n){s&&console.log("CONSTRUCTOR new channel"),h(n,"Channel(): as of jslib 1.1.x the channelId must be provided"),super(t),this.#d=e,this.#p=n,this.#w=e.channel_server+"/api/",this.#b=e.channel_server+"/api/room/",this.channelReady=new Promise((async(e,t)=>{await this.sb384Ready,this.#p||t("Channel(): no channel ID provided"),i(this.#d.channel_server+"/api/room/"+v(this.#p)+"/getChannelKeys",{method:"GET",headers:{"Content-Type":"application/json"}}).then((e=>(e.ok||t("ChannelEndpoint(): failed to get channel keys (network response not ok)"),e.json()))).then((async n=>{n.error&&t("ChannelEndpoint(): failed to get channel keys (error in response)"),await this.#v(n),this.#y=!0,e(this)})).catch((e=>{t("ChannelApi Error [1]: "+c(e))}))}))}async#m(e){this.#u=e,o&&(console.log("set channelkeys to 'k':"),console.log(e)),h(this.#u,"Channel.importKeys: no channel keys (?)"),h(this.#u.publicSignKey,"Channel.importKeys: no public sign key (?)"),h(this.privateKey,"Channel.importKeys: no private key (?)"),this.#g=await se.deriveKey(this.privateKey,this.#u.publicSignKey,"HMAC",!1,["sign","verify"])}async#v(e){o&&(console.log("loading keys:"),console.log(e)),await this.#m(await se.channelKeyStringsToCryptoKeys(e))}get keys(){return this.#u}get sbServer(){return this.#d}get readyFlag(){return this.#y}get api(){return this}get channelId(){return this.#p}get channelSignKey(){return this.#g}getLastMessageTimes(){return new Promise(((e,t)=>{i(this.#w+"/getLastMessageTimes",{method:"POST",body:JSON.stringify([this.channelId])}).then((e=>(e.ok||t(new Error("Network response was not OK")),e.json()))).then((t=>{e(t[this.channelId])})).catch((e=>{t(e)}))}))}getOldMessages(e=100,t=!1){return new Promise((async(n,r)=>{this.channelId||r("Channel.getOldMessages: no channel ID (?)"),this.#y||(o&&console.log("Channel.getOldMessages: channel not ready (we will wait)"),await this.channelReady,this.#u||r("Channel.getOldMessages: no channel keys (?) despite waiting"));let a="";t&&(a="&cursor="+this.#f),i(this.#b+v(this.channelId)+"/oldMessages?currentMessagesLength="+e+a,{method:"GET"}).then((async e=>(e.ok||r(new Error("Network response was not OK")),e.json()))).then((e=>{o&&(console.log("getOldMessages"),console.log(e)),Promise.all(Object.keys(e).filter((t=>e[t].hasOwnProperty("encrypted_contents"))).map((t=>ge(t,e[t].encrypted_contents,this.#u)))).then((e=>e.filter((e=>Boolean(e))))).then((e=>{let t=e[e.length-1];t&&(this.#f=t._id||t.id||""),s&&console.log(e),n(e)}))})).catch((e=>{r(e)}))}))}async#k(e,t){o&&console.log("#callApi:",e),this.#y||(console.log("ChannelApi.#callApi: channel not ready (we will wait)"),await this.channelReady);const n=t?"POST":"GET";return new Promise((async(r,o)=>{this.channelId||o("ChannelApi.#callApi: no channel ID (?)"),await this.ready;let s="";const a=(new Date).getTime().toString();s=a+"."+await se.sign(this.channelSignKey,a);let l={method:n,headers:{"Content-Type":"application/json",authorization:s}};t&&(l.body=JSON.stringify(t)),await this.ready,i(this.#b+v(this.channelId)+e,l).then((async e=>{const t=await e.json();if(!e.ok||t.error){let n="Network or Server error on Channel API call";e.status&&(n+=" ["+e.status+"]"),t.error&&(n+=": "+t.error),o(new Error(n))}else r(t)})).catch((e=>{o("ChannelApi (SBFetch) Error [2]: "+c(e))}))}))}updateCapacity(e){return this.#k("/updateRoomCapacity?capacity="+e)}getCapacity(){return this.#k("/getRoomCapacity")}getStorageLimit(){return this.#k("/getStorageLimit")}getMother(){return this.#k("/getMother")}getJoinRequests(){return this.#k("/getJoinRequests")}isLocked(){return new Promise((e=>this.#k("/roomLocked").then((t=>e(!0===t.locked)))))}setMOTD(e){return this.#k("/motd",{motd:e})}getAdminData(){return this.#k("/getAdminData")}downloadData(){return new Promise(((e,t)=>{this.#k("/downloadData").then((t=>{console.log("From downloadData:"),console.log(t),Promise.all(Object.keys(t).filter((e=>{const n=new RegExp(this.channelId);if(e.match(n)){const n=J(t[e],"L3318");if(n.hasOwnProperty("encrypted_contents"))return o&&console.log("Received message: ",n),n}})).map((e=>{const n=J(t[e],"L3327");return s&&console.log(e,n.encrypted_contents,this.keys),ge(e,n.encrypted_contents,this.keys)}))).then((e=>e.filter((e=>Boolean(e))))).then((n=>{let r={};n.forEach((e=>{if(!e.control&&e.imageMetaData.imageId){const t=n.find((t=>t.id&&t.id==e.imageMetaData.imageId)),o=n.find((t=>t.id&&t.id==e.imageMetaData.previewId));r[`${e.imageMetaData.imageId}.f`]=t?.verificationToken,r[`${e.imageMetaData.previewId}.p`]=o?.verificationToken}})),e({storage:r,channel:t})}))})).catch((e=>{t(e)}))}))}uploadChannel(e){return this.#k("/uploadRoom",e)}authorize(e,t){return this.#k("/authorizeRoom",{roomId:this.channelId,SERVER_SECRET:t,ownerKey:e})}postPubKey(e){throw new Error("postPubKey() deprecated")}storageRequest(e){return this.#k("/storageRequest?size="+e)}lock(){return console.warn("WARNING: lock() on channel api has not been tested/debugged fully .."),new Promise((async(e,t)=>{if(null==this.keys.lockedKey&&this.admin){const n=await crypto.subtle.generateKey({name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),r=await crypto.subtle.exportKey("jwk",n);this.#k("/lockRoom").then((t=>{t.locked&&this.acceptVisitor(JSON.stringify(this.exportable_pubKey)).then((()=>{e({locked:t.locked,lockedKey:r})}))})).catch((e=>{t(e)}))}else t(new Error("no lock key or not admin"))}))}acceptVisitor(e){return console.warn("WARNING: acceptVisitor() on channel api has not been tested/debugged fully .."),new Promise((async(t,n)=>{this.privateKey||n(new Error("acceptVisitor(): no private key"));const r=await se.deriveKey(this.privateKey,await se.importKey("jwk",J(e,"L2276"),"ECDH",!1,[]),"AES",!1,["encrypt","decrypt"]),o=await se.encrypt(se.str2ab(JSON.stringify(this.keys.lockedKey)),r);t(this.#k("/acceptVisitor",{pubKey:e,lockedKey:JSON.stringify(o)}))}))}ownerKeyRotation(){throw new Error("ownerKeyRotation() replaced by new budd() approach")}getStorageToken(e){return new Promise(((t,n)=>{this.#k(`/storageRequest?size=${e}`).then((e=>{e.hasOwnProperty("error")&&n(`storage token request error (${e.error})`),t(JSON.stringify(e))})).catch((e=>{n("ChannelApi (getStorageToken) Error [3]: "+c(e))}))}))}budd(e){let{keys:t,storage:n,targetChannel:r}=e??{};return new Promise((async(o,s)=>{e&&e.hasOwnProperty("storage")&&void 0===e.storage&&s("If you omit 'storage' it defaults to Infinity, but you cannot set 'storage' to undefined");try{if(n||(n=1/0),r){if(this.#p==r)throw new Error("[budd()]: You can't specify the same channel as targetChannel");if(t)throw new Error("[budd()]: You can't specify both a target channel and keys");o(this.#k(`/budd?targetChannel=${r}&transferBudget=${n}`))}else{const{channelData:e,exportable_privateKey:r}=await y(t||null);let a=await this.#k(`/budd?targetChannel=${e.roomId}&transferBudget=${n}`,e);a.success?o({channelId:e.roomId,key:r}):s(JSON.stringify(a))}}catch(e){s(e)}}))}}function ye(e){h(!1,"NO MESSAGE HANDLER")}n([Q,ee],he.prototype,"keys",null),n([Q,ee],he.prototype,"sbServer",null),n([Q,ee],he.prototype,"readyFlag",null),n([Q,ee],he.prototype,"api",null),n([Q,ee],he.prototype,"channelId",null),n([Q,ee],he.prototype,"channelSignKey",null),n([ee],he.prototype,"updateCapacity",null),n([ee],he.prototype,"getCapacity",null),n([ee],he.prototype,"getStorageLimit",null),n([ee],he.prototype,"getMother",null),n([ee],he.prototype,"getJoinRequests",null),n([function(e,t,n){if(n&&n.value){const r=n.value;n.value=function(...o){try{return r.call(this,...o)}catch(r){return console.log(`ExceptionReject: ${c(r)}`),console.log(e),console.log(t),console.log(n),new Promise(((e,t)=>t(`Reject: ${c(r)}`)))}}}}],he.prototype,"isLocked",null),n([ee],he.prototype,"setMOTD",null),n([ee],he.prototype,"getAdminData",null),n([ee],he.prototype,"downloadData",null),n([ee],he.prototype,"uploadChannel",null),n([ee],he.prototype,"authorize",null),n([ee],he.prototype,"postPubKey",null),n([ee],he.prototype,"storageRequest",null),n([ee],he.prototype,"lock",null),n([ee],he.prototype,"acceptVisitor",null),n([ee],he.prototype,"ownerKeyRotation",null),n([ee],he.prototype,"budd",null);class de extends he{ready;channelSocketReady;#S=!1;#K;#d;#A=ye;#E=new Map;#C=!1;#_=()=>{l("L2461","this should never be called")};#x=e=>{l("L2462","this should never be called")};constructor(e,t,n,r){super(e,n,r),h(e.channel_ws,"ChannelSocket(): no websocket server name provided"),h(t,"ChannelSocket(): no onMessage handler provided");const o=e.channel_ws+"/api/room/"+r+"/websocket";this.#A=t,this.#d=e,this.#K={url:o,ready:!1,closed:!1,timeout:2e3},this.ready=this.channelSocketReady=this.#B()}#B(){return o&&console.log("++++ CREATING ChannelSocket.readyPromise()"),new Promise(((e,t)=>{o&&console.log("++++ STARTED ChannelSocket.readyPromise()"),this.#_=e;const n=this.#K.url;o&&(console.log("++++++++ readyPromise() has url:"),console.log(n)),this.#K.websocket||(this.#K.websocket=new WebSocket(this.#K.url)),3===this.#K.websocket.readyState?this.#K.websocket=new WebSocket(n):2===this.#K.websocket.readyState&&(console.warn("STRANGE - trying to use a ChannelSocket that is in the process of closing ..."),this.#K.websocket=new WebSocket(n)),this.#K.websocket.addEventListener("open",(()=>{this.#K.closed=!1,this.channelReady.then((()=>{h(this.exportable_pubKey,"ChannelSocket.readyPromise(): no exportable pub key?"),this.#K.init={name:JSON.stringify(this.exportable_pubKey)},o&&(console.log("++++++++ readyPromise() constructed init:"),console.log(this.#K.init)),this.#K.websocket.send(JSON.stringify(this.#K.init))}))})),this.#x=this.#O.bind(this),this.#K.websocket.addEventListener("message",this.#x),this.#K.websocket.addEventListener("close",(e=>{this.#K.closed=!0,e.wasClean?e.reason.includes("does not have an owner")?t(`No such channel on this server (${this.#d.channel_server})`):console.log("ChannelSocket() was closed (cleanly): ",e.reason):console.log(`ChannelSocket() was closed (and NOT cleanly: ${e.reason} from ${this.#d.channel_server}`),t("wbSocket() closed before it was opened (?)")})),this.#K.websocket.addEventListener("error",(e=>{this.#K.closed=!0,console.log("ChannelSocket() error: ",e),t("ChannelSocket creation error (see log)")})),setTimeout((()=>{this.#S?o&&(console.log("ChannelSocket() - this socket resolved"),console.log(this)):(console.warn("ChannelSocket() - this socket is not resolving (waited 10s) ..."),console.log(this),t("ChannelSocket() - this socket is not resolving (waited 10s) ..."))}),1e4)}))}async#P(e){let t=e.data;this.#C&&(console.log("... raw unwrapped message:"),console.log(structuredClone(t)));const n=J(t,"L1489");this.#C&&(console.log("... json unwrapped version of raw message:"),console.log(Object.assign({},n))),"function"!=typeof this.#A&&l("ChannelSocket","received message but there is no handler");const r=n;try{const e=Object.entries(r)[0][1];if("encrypted_contents"===Object.keys(e)[0]){o&&(console.log("++++++++ #processMessage: received message:"),console.log(e.encrypted_contents.content));const t=j(await crypto.subtle.digest("SHA-256",(new TextEncoder).encode(e.encrypted_contents.content)));s&&console.log("Received message with hash:",t);const r=this.#E.get(t);r&&(this.#C&&console.log(`++++++++ #processMessage: found matching ack for id ${t}`),this.#E.delete(t),r("success"));const a=Object.entries(n)[0][0],i=e.encrypted_contents.iv;if(i&&f(i)&&16==i.length){e.encrypted_contents.iv=x(i);try{const t=await ge(a,e.encrypted_contents,this.keys);if(!t)return;this.#C&&(console.log("++++++++ #processMessage: passing to message handler:"),console.log(Object.assign({},t))),this.#A(t)}catch{console.warn("Error decrypting message, dropping (ignoring) message")}}else console.error("#processMessage: - iv is malformed, should be 16-char b64 string (ignoring)")}else console.warn("++++++++ #processMessage: can't decipher message, passing along unchanged:"),console.log(Object.assign({},r)),this.onMessage(r)}catch(e){console.log(`++++++++ #processMessage: caught exception while decyphering (${e}), passing it along unchanged`),this.onMessage(r)}}#R(e){console.warn("WARNING: firstMessageEventHandler() called recursively (?)"),console.warn(e)}#O(e){this.#C&&console.log("FIRST MESSAGE HANDLER CALLED");const t=this.#R.bind(this);this.#K.websocket.addEventListener("message",t),this.#K.websocket.removeEventListener("message",this.#x),o&&(console.log("++++++++ readyPromise() received ChannelKeysMessage:"),console.log(e));const n=J(e.data,"L2239");o&&console.log(n),h(n.ready,"got roomKeys but channel reports it is not ready (?)"),this.motd=n.motd,this.locked=n.roomLocked;const r=J(n.keys.ownerKey,"L2246");h(this.keys.ownerPubKeyX===r.x,"ChannelSocket.readyPromise(): owner key mismatch??"),h(this.readyFlag,"#ChannelReadyFlag is false, parent not ready (?)"),this.owner=se.compareKeys(r,this.exportable_pubKey),this.admin=!1,this.#K.websocket.addEventListener("message",this.#P.bind(this)),this.#K.websocket.removeEventListener("message",t),o&&console.log("++++++++ readyPromise() all done - resolving!"),this.#S=!0,this.#_(this)}get status(){if(!this.#K.websocket)return"CLOSED";switch(this.#K.websocket.readyState){case 0:return"CONNECTING";case 1:return"OPEN";case 2:return"CLOSING";default:return"CLOSED"}}set onMessage(e){this.#A=e}get onMessage(){return this.#A}set enableTrace(e){this.#C=e,e&&console.log("==== jslib ChannelSocket: Tracing enabled ====")}send(e){let t="string"==typeof e?new le(this,e):e;return h(this.#K.websocket,"ChannelSocket.send() called before ready"),this.#K.closed&&(this.#C&&console.info("send() triggered reset of #readyPromise() (normal)"),this.ready=this.channelSocketReady=this.#B(),this.#S=!0),new Promise(((e,n)=>{t.ready.then((t=>{this.ready.then((()=>{switch(this.#S||n("ChannelSocket.send() is confused - ready or not?"),this.#K.websocket.readyState){case 1:this.#C&&(console.log("++++++++ ChannelSocket.send(): Wrapping message contents:"),console.log(Object.assign({},t.contents))),se.wrap(t.encryptionKey,JSON.stringify(t.contents),"string").then((r=>{const o=JSON.stringify({encrypted_contents:r,recipient:t.sendToPubKey?t.sendToPubKey:void 0});this.#C&&(console.log("++++++++ ChannelSocket.send(): sending message:"),console.log(r.content.slice(0,100)+"  ...  "+r.content.slice(-100))),crypto.subtle.digest("SHA-256",(new TextEncoder).encode(r.content)).then((t=>{const r=j(t);this.#C&&(console.log("++++++++ ChannelSocket.send():Which has hash:"),console.log(r)),this.#E.set(r,e),this.#K.websocket.send(o),setTimeout((()=>{if(this.#E.has(r)){this.#E.delete(r);const e=`Websocket request timed out (no ack) after ${this.#K.timeout}ms (${r})`;console.error(e),n(e)}else this.#C&&console.log("++++++++ ChannelSocket.send() completed sending"),e("success")}),this.#K.timeout)}))}));break;case 3:case 0:case 2:n("socket not OPEN - either CLOSED or in the state of CONNECTING/CLOSING")}}))}))}))}get exportable_owner_pubKey(){return this.keys.ownerKey}}n([ee],de.prototype,"onMessage",null),n([function(e,t,n){if(n&&n.value){const e=n.value;n.value=function(...t){for(let e of t){const t=e.constructor.name;"string"==typeof(n=t)&&te.includes(n)&&h(oe(e,t),`invalid parameter: ${e} (expecting ${t})`)}var n;return e.call(this,...t)}}}],de.prototype,"send",null),n([Q,ee],de.prototype,"exportable_owner_pubKey",null);class ue extends he{constructor(e,t,n){super(e,t,n)}send(e,t){return new Promise(((e,t)=>{t("ChannelEndpoint.send(): send outside ChannelSocket not yet implemented")}))}set onMessage(e){h(!1,"ChannelEndpoint.onMessage: send/receive outside ChannelSocket not yet implemented")}}async function ge(e,t,n){const r=g.exec(e);let o=n.encryptionKey;if(r){let e={type:"encrypted",channelID:r[1],timestampPrefix:r[2],_id:r[1]+r[2],encrypted_contents:d(t)};const s=await se.unwrap(o,e.encrypted_contents,"string");let a={...e,...J(s,"L1977")};if(a.contents&&(a.text=a.contents),a.user={name:a.sender_username?a.sender_username:"Unknown",_id:a.sender_pubKey},a.verificationToken&&!a.sender_pubKey)return void console.error("ERROR: message with verification token is lacking sender identity (cannot be verified).");const i=await se.importKey("jwk",a.sender_pubKey,"ECDH",!0,[]),c=await se.deriveKey(n.signKey,i,"HMAC",!1,["sign","verify"]);return await se.verify(c,a.sign,a.contents)?(a.whispered,a):(console.error("***** signature is NOT correct for message (rejecting)"),console.log("verifyKey:"),console.log(Object.assign({},c)),console.log("m2.sign"),console.log(Object.assign({},a.sign)),console.log("m2.contents"),console.log(structuredClone(a.contents)),console.log("Message:"),console.log(Object.assign({},a)),void console.trace())}return console.log("++++++++ #processMessage: ERROR - cannot parse channel ID / timestamp, invalid message"),console.log(Object.assign({},e)),void console.log(Object.assign({},t))}class pe{version="2";#j="b";#M;#T;#I;shardServer;iv;salt;fileName;dateAndTime;fileType;lastModified;actualSize;savedSize;constructor(e){const{version:t,type:n,id:r,key:o,verification:s,iv:a,salt:i,fileName:c,dateAndTime:l,shardServer:h,fileType:y,lastModified:d,actualSize:u,savedSize:g}=e;if(n&&(this.#j=n),t)this.version=t;else if(o&&r)if($(o)&&$(r))this.version="2";else{if(!w(o)||!w(r))throw new Error("Unable to determine version from key and id");this.version="1"}else this.version="2";r&&(this.id=r),o&&(this.key=o),s&&(this.verification=s),this.iv=a,this.salt=i,this.fileName=c,this.dateAndTime=l,this.shardServer=h,this.fileType=y,this.lastModified=d,this.actualSize=u,this.savedSize=g}set id_binary(e){if(!e)throw new Error("Invalid id_binary");if(32!==e.byteLength)throw new Error("Invalid id_binary length");this.#M=e,Object.defineProperty(this,"id64",{get:()=>j(this.#M),enumerable:!1,configurable:!1}),Object.defineProperty(this,"id32",{get:()=>D(this.#M),enumerable:!1,configurable:!1})}set key_binary(e){if(!e)throw new Error("Invalid key_binary");if(32!==e.byteLength)throw new Error("Invalid key_binary length");this.#T=e,Object.defineProperty(this,"key64",{get:()=>j(this.#T),enumerable:!1,configurable:!1}),Object.defineProperty(this,"key32",{get:()=>D(this.#T),enumerable:!1,configurable:!1})}set id(e){if("string"==typeof e){if("1"===this.version){if(!w(e))throw new Error("Requested version 1, but id is not b64");this.id_binary=x(e)}else if("2"===this.version){if(!$(e))throw new Error("Requested version 2, but id is not b62");this.id_binary=I(e)}}else{if(!(e instanceof ArrayBuffer))throw new Error("Invalid ID type");if(32!==e.byteLength)throw new Error("Invalid ID length");this.id_binary=e}}set key(e){if("string"==typeof e){if("1"===this.version){if(!w(e))throw new Error("Requested version 1, but key is not b64");this.#T=x(e)}else if("2"===this.version){if(!$(e))throw new Error("Requested version 2, but key is not b62");this.#T=I(e)}}else{if(!(e instanceof ArrayBuffer))throw new Error("Invalid key type");if(32!==e.byteLength)throw new Error("Invalid key length");this.#T=e}}get id(){if(h(this.#M,"object handle id is undefined"),"1"===this.version)return j(this.#M);if("2"===this.version)return D(this.#M);throw new Error("Invalid or missing version (internal error, should not happen)")}get key(){if(h(this.#T,"object handle key is undefined"),"1"===this.version)return j(this.#T);if("2"===this.version)return D(this.#T);throw new Error("Invalid or missing version (internal error, should not happen)")}get id64(){throw new Error("Invalid id_binary")}get id32(){throw new Error("Invalid id_binary")}get key64(){throw new Error("Invalid key_binary")}get key32(){throw new Error("Invalid key_binary")}set verification(e){this.#I=e}get verification(){return h(this.#I,"object handle verification is undefined"),this.#I}get type(){return this.#j}}class fe{server;channelServer;shardServer;sbServer;constructor(e){const{storage_server:t,channel_server:n,shard_server:r}=e;this.server=t+"/api/v1",this.channelServer=n+"/api/room/",r&&(this.shardServer=r+"/api/v1"),this.sbServer=e}#D(e){const t=e.byteLength;let n;n=t+4<4096?4096:t+4<1048576?2**Math.ceil(Math.log2(t+4)):1048576*Math.ceil((t+4)/1048576);let r=H(e,new Uint8Array(n-t).buffer);return new DataView(r).setUint32(n-4,t),s&&console.log("#padBuf bytes:",r.slice(-4)),r}#N(e){const t=e.slice(-4);var n=new DataView(t).getUint32(0);const r=new DataView(t).getUint32(0,!0);return r<n&&(s&&console.warn("#unpadData - size of shard encoded as little endian (fixed upon read)"),n=r),s&&console.log(`#unpadData - size of object is ${n}`),e.slice(0,n)}#L(e,t){return new Promise(((n,r)=>{try{se.importKey("raw",e,"PBKDF2",!1,["deriveBits","deriveKey"]).then((e=>{crypto.subtle.deriveKey({name:"PBKDF2",salt:t,iterations:1e5,hash:"SHA-256"},e,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]).then((e=>{n(e)}))}))}catch(e){r(e)}}))}#U(e,t){return new Promise(((n,r)=>{i(this.server+"/storeRequest?name="+D(e)+"&type="+t).then((e=>e.arrayBuffer())).then((e=>{const t=W(e);n({salt:new Uint8Array(t.salt),iv:new Uint8Array(t.iv)})})).catch((e=>{console.warn(`**** ERROR: ${e}`),r(e)}))}))}async#$(e,t,n,r,o,s,a){return new Promise((async(i,c)=>{try{const l=await this.#L(n,a),h=await se.encrypt(e,l,s,"arrayBuffer"),y=await o.getStorageToken(h.byteLength),d=await this.storeObject(r,t,s,a,y,h);d.error&&c(`storeObject() failed: ${d.error}`),d.image_id!=v(t)&&c(`received imageId ${d.image_id} but expected ${t}`),i(d.verification_token)}catch(e){const t=`storeObject() failed: ${e}`;console.error(t),c(t)}}))}storeObject(e,t,n,r,o,s){return new Promise(((a,c)=>{if("string"!=typeof e){const e="NEW in 1.2.x - storeData() and storeObject() have switched places, you probably meant to use storeData()";console.error(e),c("errMsg")}i(this.server+"/storeData?type="+e+"&key="+v(t),{method:"POST",body:V({iv:n,salt:r,image:s,storageToken:(new TextEncoder).encode(o),vid:crypto.getRandomValues(new Uint8Array(48))})}).then((e=>(e.ok||c("response from storage server was not OK"),e.json()))).then((e=>{a(e)})).catch((e=>{c(e)}))}))}storeData(e,t,n,r){return new Promise(((o,a)=>{if("string"==typeof e){const e="NEW in 1.2.x - storeData() and storeObject() have switched places, you probably meant to use storeObject()";console.error(e),a("errMsg")}e instanceof Uint8Array&&(s&&console.log("converting Uint8Array to ArrayBuffer"),e=new Uint8Array(e).buffer),e instanceof ArrayBuffer||"ArrayBuffer"==e.constructor.name||(s&&console.log("buf must be an ArrayBuffer:"),console.log(e),a("buf must be an ArrayBuffer"));const i=e.byteLength;r&&(console.warn("storeData() called with metadata - this is deprecated (let us know how/where this is needed)"),a("storeData() called with metadata - this is deprecated"));const c=n instanceof ue?n:new ue(this.sbServer,void 0,n),l=this.#D(e);se.generateIdKey(l).then((e=>{this.#U(e.id_binary,t).then((n=>{const r=D(e.id_binary),s=D(e.key_material),a={[re]:!0,version:"2",type:t,id:r,key:s,iv:n.iv,salt:n.salt,actualSize:i,verification:this.#$(l,r,e.key_material,t,c,n.iv,n.salt)};o(a)})).catch((e=>a(e)))}))}))}#H(e,t){return new Promise(((n,r)=>{try{let t=J(se.ab2str(new Uint8Array(e)),"L3062");t.error&&r(`#processData() error: ${t.error}`)}catch(e){}finally{const r=W(e);o&&(console.log("Payload (#processData) is:"),console.log(r));const i=new Uint8Array(r.iv),c=new Uint8Array(r.salt),l=t.iv?"string"==typeof t.iv?x(t.iv):t.iv:void 0,h=t.salt?"string"==typeof t.salt?x(t.salt):t.salt:void 0;var a;if(l&&!R(i,l)&&(console.error("WARNING: nonce from server differs from local copy"),console.log(`object ID: ${t.id}`),console.log(` local iv: ${j(l)}`),console.log(`server iv: ${j(r.iv)}`)),h&&!R(c,h)&&(console.error("WARNING: salt from server differs from local copy (will use server)"),t.salt?"string"==typeof t.salt?(console.log("h.salt is in string form (unprocessed):"),console.log(t.salt)):(console.log("h.salt is in arrayBuffer or Uint8Array"),console.log("h.salt as b64:"),console.log(j(t.salt)),console.log("h.salt unprocessed:"),console.log(t.salt)):console.log("h.salt is undefined"),console.log("handleSalt as b64:"),console.log(j(h)),console.log("handleSalt unprocessed:"),console.log(h)),s&&(console.log("will use nonce and salt of:"),console.log(`iv: ${j(i)}`),console.log(`salt : ${j(c)}`)),"1"===t.version)a=x(t.key);else{if("2"!==t.version)throw new Error("Invalid or missing version (internal error, should not happen)");a=I(t.key)}this.#L(a,c).then((e=>{const t=r.image;s&&(console.log("data.image:      "),console.log(r.image),console.log("encrypted_image: "),console.log(t)),se.unwrap(e,{content:t,iv:i},"arrayBuffer").then((e=>{const t=this.#N(e);o&&(console.log("#processData(), unwrapped img: "),console.log(t)),n(t)}))}))}}))}async#F(e,t,n,r){return new Promise(((o,s)=>{try{i(e+t,{method:"GET"}).then((e=>e.ok?e.arrayBuffer():null)).then((e=>null===e?null:this.#H(e,n))).then((e=>{null===e&&o(null),o("string"===r?se.ab2str(new Uint8Array(e)):e)})).catch((e=>{o(null)}))}catch(e){o(null)}}))}fetchData(e,t="arrayBuffer"){return new Promise((async(n,r)=>{const s=new pe(e);s||r("SBObjectHandle is null or undefined");const a=await s.verification,i=s.shardServer?s.shardServer+"/api/v1":this.shardServer?this.shardServer:this.server;o&&console.log("fetchData(), fetching from server: "+i);const c="/fetchData?id="+s.id+"&type="+s.type+"&verification_token="+a,l=await this.#F(i,c,s,t);l&&n(l);for(let e=0;e<ie.length;e++){const r=ie[e]+"/api/v1";if(r!==i){const e=await this.#F(r,c,s,t);e&&n(e)}}r("fetchData() failed - tried all servers")}))}async retrieveImage(e,t,n,r,o,s){console.trace("retrieveImage()"),console.log(e);const a=n||e.previewId,i=r||e.previewKey,c=o||"p",l=s||(e.imgObjVersion?e.imgObjVersion:"2"),y=t.find((e=>e.id&&e.id==a));if(console.log(y),y){h(y.verificationToken,"retrieveImage(): verificationToken missing (?)"),h(y.id,"retrieveImage(): id missing (?)");const e={type:c,version:l,id:y.id,key:i,verification:new Promise(((e,t)=>{y.verificationToken?e(y.verificationToken):t("retrieveImage(): verificationToken missing (?)")}))},t=await this.fetchData(e);return console.log(t),{url:"data:image/jpeg;base64,"+j(t,"b64")}}return{error:"Failed to fetch data - missing control message for that image"}}}class we{#J;#G;#V;#W=r;constructor(e,t=!1){console.warn(`==== CREATING Snackabra object generation: ${this.version} ====`),e&&(this.#V=Object.assign({},e),this.#J=new fe(e),t&&(o=!0),o&&console.warn("++++ Snackabra constructor ++++ setting DBG to TRUE ++++"))}connect(e,t,n){return o&&(console.log("++++ Snackabra.connect() ++++"),t&&console.log(t),n&&console.log(n)),new Promise((async r=>{this.#V?r(new de(this.#V,e,t,n)):r(Promise.any(ae.map((r=>new de(r,e,t,n).ready))))}))}create(e,t,n){return new Promise((async(r,o)=>{try{const{channelData:s,exportable_privateKey:a}=await y(n||null);if(!s.roomId)throw new Error("Unable to determine roomId from key and id (it is empty)");const c=t instanceof ue?t:void 0;if(t&&"string"==typeof t&&(s.SERVER_SECRET=t),c){const e=await c.getStorageToken(33554432);e||o("[create channel] Failed to get storage token for the provided channel"),s.storageToken=e}const l=(new TextEncoder).encode(JSON.stringify(s));let h=await i(e.channel_server+"/api/room/"+v(s.roomId)+"/uploadRoom",{method:"POST",body:l});if(h=await h.json(),h.success)r({channelId:s.roomId,key:a,server:e.channel_server});else{const e=`Creating channel did not succeed (${JSON.stringify(h)})`;console.error(e),o(e)}}catch(e){const t=`Creating channel did not succeed: ${e}`;console.error(t),o(t)}}))}get channel(){return this.#G}get storage(){return this.#J}get crypto(){return se}get version(){return this.#W}}var be={Snackabra:we,SBMessage:le,Channel:he,SBCrypto:Y,SB384:ce,arrayBufferToBase64:j,sbCrypto:se,version:r};return globalThis.SB||(globalThis.SB=be),console.warn(`==== SNACKABRA jslib loaded ${globalThis.SB.version} ====`),t})()));